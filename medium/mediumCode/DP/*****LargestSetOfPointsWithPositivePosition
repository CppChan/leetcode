public class Solution {
  public int largest(Point[] points) {
    if(points.length==0)return 0;
    Arrays.sort(points,new pointsComparator());
    ArrayList<Integer> col = new ArrayList<Integer>();
    col.add(points[0].y);
    for(int i = 1; i<points.length; i++){
       col.add(points[i].y);#important corner case!!!
    }
    if(col.size()==1)return 0;
    return findincrease(col);
  }
  public int findincrease(ArrayList<Integer>col){
    int[] dp = new int[col.size()];
    int res = 0;
    for(int i = 0; i<dp.length; i++){
      if(i==0)dp[i]=1;
      else{
        int temp = 0;
        for(int j = i-1; j>=0;j--){
          if(col.get(i)>col.get(j) &&dp[j]>temp)temp = dp[j];
        }
        dp[i]=temp+1;
      }
      if(dp[i]>res &&dp[i]>1) res = dp[i];
    }
    return res;
  }
  public class pointsComparator implements Comparator<Point>{ #important corner case!!!
    public int compare(Point o1, Point o2){
        if(o1.x!=o2.x)return o1.x-o2.x;
        else return o1.y-o2.y;
    }
  }
}